[{"C:\\Users\\eugen\\WebstormProjects\\untitled\\my-app\\src\\index.js":"1","C:\\Users\\eugen\\WebstormProjects\\untitled\\my-app\\src\\Ingredients.js":"2","C:\\Users\\eugen\\WebstormProjects\\untitled\\my-app\\src\\Instructions.js":"3"},{"size":4275,"mtime":1607624871862,"results":"4","hashOfConfig":"5"},{"size":569,"mtime":1607531239538,"results":"6","hashOfConfig":"5"},{"size":787,"mtime":1607531425030,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"1nn3qod",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\eugen\\WebstormProjects\\untitled\\my-app\\src\\index.js",["16","17","18"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport RecipeList from './Ingredients';\r\nimport InstructionList from './Instructions';\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n        return (\r\n            <button className=\"square\" onClick={this.props.onClick}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {squares : Array(9).fill(null)\r\n        ,\r\n        isNext :  true};\r\n    }\r\n\r\n    updateBoard(index) {\r\n        if (calculateWinner(this.state.squares) || this.state.squares[index]) {\r\n            return;\r\n        }\r\n        this.setState(prevstate=>{\r\n            const squares = prevstate.squares;\r\n            squares[index] = prevstate.isNext ? 'X' : 'O';\r\n            return  {squares : squares, isNext: !prevstate.isNext};\r\n        })\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return <Square value={this.state.squares[i]} onClick={() => this.updateBoard(i)}/>\r\n    }\r\n\r\n    render() {\r\n        let status = `Next player: ${this.state.isNext ? 'X' : 'O'}`;\r\n        const winner = calculateWinner(this.state.squares);\r\n        if (winner){\r\n            status = `Winner is ${winner}`\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"status\">{status}</div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{/* status */}</div>\r\n                    <ol>{/* TODO */}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n// ========================================\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Board />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n/*\r\nconst recipes = ['lb Salmon', '1 cup Pine Nuts', '2 cups Butter Lettuce', '1 Yellow Squash', '1/2 cup Olive Oil', '3 cloves of Garlic']\r\n\r\nconst Instructions =   ['Preheat the oven to 350 degrees.',\r\n    'Spread the olive oil around a glass baking dish.',\r\n    'Add the salmon, garlic, and pine nuts to the dish.',\r\n    'Bake for 15 minutes.',\r\n    'Add the yellow squash and put back in the oven for 30 mins.',\r\n    'Remove from oven and let cool for 15 minutes. Add the lettuce and serve.'];\r\nReactDOM.render(\r\n\r\n    React.createElement('section', {id : 'baked-salmon1'},  React.createElement(RecipeList, {recipes : recipes}, null),  React.createElement(InstructionList, {Instructions : Instructions}, null)),\r\n    document.getElementById('ex4')\r\n)\r\n\r\n\r\n\r\nfunction ListItem(props) {\r\nreturn <li>{props.value}</li>;\r\n}\r\n\r\nfunction ProfessorList(props) {\r\nconst professors = props.professors;\r\nconst listItems = professors.map((prof) => <ListItem key={prof} value={prof} /> );\r\nreturn (<ul>{listItems}</ul>);\r\n}\r\n\r\n\r\n\r\n\r\nconst professors = ['Jean', 'Martin', 'Nathan', 'Sandrine', 'Marine', 'Assia']\r\n\r\nReactDOM.render(\r\n<ProfessorList professors={professors} />,\r\ndocument.getElementById('professor')\r\n)\r\n*/",["19","20"],"C:\\Users\\eugen\\WebstormProjects\\untitled\\my-app\\src\\Ingredients.js",[],"C:\\Users\\eugen\\WebstormProjects\\untitled\\my-app\\src\\Instructions.js",[],{"ruleId":"21","severity":1,"message":"22","line":4,"column":8,"nodeType":"23","messageId":"24","endLine":4,"endColumn":18},{"ruleId":"21","severity":1,"message":"25","line":5,"column":8,"nodeType":"23","messageId":"24","endLine":5,"endColumn":23},{"ruleId":"21","severity":1,"message":"26","line":69,"column":7,"nodeType":"23","messageId":"24","endLine":69,"endColumn":11},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},"no-unused-vars","'RecipeList' is defined but never used.","Identifier","unusedVar","'InstructionList' is defined but never used.","'Game' is defined but never used.","no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-global-assign","no-unsafe-negation"]